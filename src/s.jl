export
    saelgv,
    scard,
    scard!,
    scdecd,
    sce2c,
    sce2s,
    sce2t,
    scencd,
    scfmt,
    scpart,
    scs2e,
    sct2e,
    sctiks,
    sdiff,
    set,
    sincpt,
    spd,
    sphcyl,
    sphlat,
    sphrec,
    spk14a,
    spk14b,
    spk14e,
    spkacs,
    spkapo,
    spkapp,
    spkaps,
    spkcls,
    spkcov!,
    spkcov,
    spkcpo,
    spkcpt,
    spkcvo,
    spkcvt,
    spkez,
    spkezp,
    spkezr,
    spkgeo,
    spkgps,
    spklef,
    spkltc,
    spkobj!,
    spkobj,
    spkopa,
    spkopn,
    spkpos,
    spksfs,
    spkssb,
    spksub,
    spkuds,
    spkuef,
    spkw13,
    str2et,
    subpnt,
    subslr,
    surfpt,
    swpool,
    sxform

"""
    saelgv(vec1, vec2)

Find semi-axis vectors of an ellipse generated by two arbitrary three-dimensional vectors.

### Arguments ###

- `vec1`, `vec2`: Two vectors used to generate an ellipse

### Output ###

- `smajor`: Semi-major axis of ellipse
- `sminor`: Semi-minor axis of ellipse

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/saelgv_c.html)
"""
function saelgv(vec1, vec2)
    length(vec1) != 3 && throw(ArgumentError("`vec1` must have three elements."))
    length(vec2) != 3 && throw(ArgumentError("`vec2` must have three elements."))
    smajor = Array{SpiceDouble}(undef, 3)
    sminor = Array{SpiceDouble}(undef, 3)
    ccall((:saelgv_c, libcspice), Cvoid,
          (Ptr{SpiceDouble}, Ptr{SpiceDouble}, Ptr{SpiceDouble}, Ptr{SpiceDouble}),
          vec1, vec2, smajor, sminor)
    smajor, sminor
end

"""
    scard!(cell::SpiceCell{T}, card) where T

Set the cardinality of a cell.

### Arguments ###

- `cell`: The cell
- `card`: Cardinality of (number of elements in) the cell

### Output ###

Returns `cell` with its cardinality set to `card`.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/scard_c.html)
"""
function scard!(cell::SpiceCell{T}, card) where T
    ccall((:scard_c, libcspice), Cvoid, (SpiceInt, Ref{Cell{T}}), card, cell.cell)
    cell
end

@deprecate scard scard!

"""
    scdecd(sc, sclkdp, lenout=128)

Convert double precision encoding of spacecraft clock time into a character representation.

### Arguments ###

- `sc`: NAIF spacecraft identification code
- `sclkdp`: Encoded representation of a spacecraft clock count
- `lenout`: Maximum allowed length of output SCLK string

### Output ###

Returns the character representation of a clock count.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/scdecd_c.html)
"""
function scdecd(sc, sclkdp, lenout=128)
    sclkch = Array{SpiceChar}(undef, lenout)
    ccall((:scdecd_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, SpiceInt, Ptr{SpiceChar}),
          sc, sclkdp, lenout, sclkch)
    handleerror()
    unsafe_string(pointer(sclkch))
end

"""
    sce2c(sc, et)

Convert ephemeris seconds past J2000 (ET) to continuous encoded spacecraft clock ("ticks").
Non-integral tick values may be returned.

### Arguments ###

- `sc`: NAIF spacecraft ID code
- `et`: Ephemeris time, seconds past J2000

### Output ###

Returns SCLK, encoded as ticks since spacecraft clock start.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sce2c_c.html)
"""
function sce2c(sc, et)
    sclkdp = Ref{SpiceDouble}()
    ccall((:sce2c_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Ref{SpiceDouble}),
          sc, et, sclkdp)
    handleerror()
    sclkdp[]
end

"""
    sce2s(sc, et, lenout=128)

Convert an epoch specified as ephemeris seconds past J2000 (ET) to a character string
representation of a spacecraft clock value (SCLK).

### Arguments ###

- `sc`: NAIF spacecraft identification code
- `et`: Ephemeris time, specified as seconds past J2000
- `lenout`: Maximum allowed length of output SCLK string

### Output ###

Returns an SCLK string.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sce2s_c.html)
"""
function sce2s(sc, et, lenout=128)
    sclkch = Array{SpiceChar}(undef, lenout)
    ccall((:sce2s_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, SpiceInt, Ptr{SpiceChar}),
          sc, et, lenout, sclkch)
    handleerror()
    unsafe_string(pointer(sclkch))
end

"""
    sce2t(sc, et)

Convert ephemeris seconds past J2000 (ET) to integral encoded spacecraft clock ("ticks").
For conversion to fractional ticks, (required for C-kernel production), see the routine
[sce2c](@ref).

### Arguments ###

- `sc`: NAIF spacecraft ID code
- `et`: Ephemeris time, seconds past J2000

### Output ###

Returns SCLK, encoded as ticks since spacecraft clock start.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sce2c_t.html)
"""
function sce2t(sc, et)
    sclkdp = Ref{SpiceDouble}()
    ccall((:sce2t_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Ref{SpiceDouble}),
          sc, et, sclkdp)
    handleerror()
    sclkdp[]
end

"""
    scencd(sc, sclkch)

Encode character representation of spacecraft clock time into a double precision number.

### Arguments ###

- `sc`: NAIF spacecraft identification code
- `sclkch`: Character representation of a spacecraft clock

### Output ###

Returns the encoded representation of the clock count.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/scencd_c.html)
"""
function scencd(sc, sclkch)
    sclkdp = Ref{SpiceDouble}()
    ccall((:scencd_c, libcspice), Cvoid,
          (SpiceInt, Cstring, Ref{SpiceDouble}),
          sc, sclkch, sclkdp)
    handleerror()
    sclkdp[]
end

"""
    scfmt(sc, ticks, lenout=128)

Convert encoded spacecraft clock ticks to character clock format.

### Arguments ###

- `sc`: NAIF spacecraft identification code
- `ticks`: Encoded representation of a spacecraft clock count
- `lenout`: Maximum allowed length of output string

### Output ###

Returns a character representation of a clock count.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/scfmt_c.html)
"""
function scfmt(sc, ticks, lenout=128)
    clkstr = Array{SpiceChar}(undef, lenout)
    ccall((:scfmt_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, SpiceInt, Ptr{SpiceChar}),
          sc, ticks, lenout, clkstr)
    handleerror()
    unsafe_string(pointer(clkstr))
end

"""
    scpart(sc)

Get spacecraft clock partition information from a spacecraft clock kernel file.

### Arguments ###

- `sc`: NAIF spacecraft identification code

### Output ###

- `nparts`: The number of spacecraft clock partitions
- `pstart`: Array of partition start times
- `pstop`: Array of partition stop times

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/scpart_c.html)
"""
function scpart(sc)
    nparts = Ref{SpiceInt}()
    pstart = Array{SpiceDouble}(undef, 9999)
    pstop = Array{SpiceDouble}(undef, 9999)
    ccall((:scpart_c, libcspice), Cvoid,
          (SpiceInt, Ref{SpiceInt}, Ptr{SpiceDouble}, Ptr{SpiceDouble}),
          sc, nparts, pstart, pstop)
    handleerror()
    pstart[1:nparts[]], pstop[1:nparts[]]
end

"""
    scs2e(sc, sclkch)

Convert a spacecraft clock string to ephemeris seconds past J2000 (ET).

### Arguments ###

- `sc`: NAIF integer code for a spacecraft
- `sclkch`: An SCLK string

### Output ###

Returns ephemeris time seconds past J2000.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/scs2e_c.html)
"""
function scs2e(sc, sclkch)
    et = Ref{SpiceDouble}()
    ccall((:scs2e_c, libcspice), Cvoid,
          (SpiceInt, Cstring, Ref{SpiceDouble}),
          sc, sclkch, et)
    handleerror()
    et[]
end

"""
    sct2e(sc, sclkdp)

Convert encoded spacecraft clock ("ticks") to ephemeris seconds past J2000 (ET).

### Arguments ###

- `sc`: NAIF integer code for a spacecraft
- `sclkdp`: SCLK, encoded as ticks since spacecraft clock start.

### Output ###

Returns ephemeris time seconds past J2000.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sct2e_c.html)
"""
function sct2e(sc, sclkdp)
    et = Ref{SpiceDouble}()
    ccall((:sct2e_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Ref{SpiceDouble}),
          sc, sclkdp, et)
    handleerror()
    et[]
end

"""
    sctiks(sc, clkstr)

Convert a spacecraft clock format string to number of "ticks".

### Arguments ###

- `sc`: NAIF spacecraft identification code
- `clkstr`: Character representation of a spacecraft clock

### Output ###

Returns the number of ticks represented by the clock string.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sctiks_c.html)
"""
function sctiks(sc, clkstr)
    ticks = Ref{SpiceDouble}()
    ccall((:sctiks_c, libcspice), Cvoid,
          (SpiceInt, Cstring, Ref{SpiceDouble}),
          sc, clkstr, ticks)
    handleerror()
    ticks[]
end

"""
    sdiff(a::T, b::T) where T <: SpiceCell

Compute the symmetric difference of two sets of any data type to form a third set.

### Arguments ###

- `a`: First input set
- `b`: Second input set

### Output ###

Returns a cell containing the symmetric difference of `a` and `b`.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sdiff_c.html)
"""
function sdiff(a::SpiceCell{T}, b::SpiceCell{T}) where T
    size = max(a.cell.size, b.cell.size)
    if T <: SpiceChar
        length = max(a.cell.length, b.cell.length)
        out = SpiceCell{T}(size, length)
    else
        out = SpiceCell{T}(size)
    end
    ccall((:sdiff_c, libcspice), Cvoid, (Ref{Cell{T}}, Ref{Cell{T}}, Ref{Cell{T}}),
          a.cell, b.cell, out.cell)
    handleerror()
    out
end

"""
    set(a::T, b::T) where T <: SpiceCell

Given a relational operator, compare two sets of any data type.

### Arguments ###

- `a`: First set
- `op`: Comparison operator
- `b`: Second set

### Output ###

Returns the result of the comparison: `a (op) b`.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/set_c.html)
"""
function set(a::SpiceCell{T}, op, b::SpiceCell{T}) where T
    res = ccall((:set_c, libcspice), SpiceBoolean, (Ref{Cell{T}}, Cstring, Ref{Cell{T}}),
                a.cell, op, b.cell)
    handleerror()
    Bool(res[])
end

function _shellc(array)
    carray, m, n = chararray(array)
    ccall((:shellc_c, libcspice), Cvoid,
          (SpiceInt, SpiceInt, Ptr{SpiceChar}),
          m, n, carray)
    handleerror()
    array[:] .= [unsafe_string(pointer(carray[:, i])) for i = 1:m]
end

"""
    shellc(array)

!!! warning "Deprecated"
    Use `sort!(array)` instead.
"""
shellc

@deprecate shellc(array) sort!(array)

function _shelld(array)
    n = length(array)
    ccall((:shelld_c, libcspice), Cvoid,
          (SpiceInt, Ptr{SpiceDouble}),
          n, array)
    handleerror()
    array
end

"""
    shelld(array)

!!! warning "Deprecated"
    Use `sort!(array)` instead.
"""
shelld

@deprecate shelld(array) sort!(array)

function _shelli(array)
    array = SpiceInt.(array)
    n = length(array)
    ccall((:shelli_c, libcspice), Cvoid,
          (SpiceInt, Ptr{SpiceInt}),
          n, array)
    handleerror()
    Int.(array)
end

"""
    shelli(array)

!!! warning "Deprecated"
    Use `sort!(array)` instead.
"""
shelli

@deprecate shelli(array) sort!(array)

"""
    sincpt(method, target, et, fixref, abcorr, obsrvr, dref, dvec)

Given an observer and a direction vector defining a ray, compute the surface intercept
of the ray on a target body at a specified epoch, optionally corrected for light time
and stellar aberration.

The surface of the target body may be represented by a triaxial ellipsoid or by
topographic data provided by DSK files.

### Arguments ###

- `method`: Computation method
- `target`: Name of target body
- `et`: Epoch in TDB seconds past J2000 TDB
- `fixref`: Body-fixed, body-centered target body frame
- `abcorr`: Aberration correction flag
- `obsrvr`: Name of observing body
- `dref`: Reference frame of ray's direction vector
- `dvec`: Ray's direction vector

### Output ###

Returns a tuple consisting of the following data or `nothing` if no intercept was found.

- `spoint`: Surface intercept point on the target body
- `trgepc`: Intercept epoch
- `srfvec`: Vector from observer to intercept point

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sincpt_c.html)
"""
function sincpt(method, target, et, fixref, abcorr, obsrvr, dref, dvec)
    length(dvec) != 3 && throw(ArgumentError("Length of `dvec` must be 3."))

    spoint = Array{SpiceDouble}(undef, 3)
    trgepc = Ref{SpiceDouble}()
    srfvec = Array{SpiceDouble}(undef, 3)
    found = Ref{SpiceBoolean}()

    ccall((:sincpt_c, libcspice), Cvoid,
          (Cstring, Cstring, SpiceDouble, Cstring, Cstring, Cstring, Cstring, Ptr{SpiceDouble},
           Ptr{SpiceDouble}, Ref{SpiceDouble}, Ptr{SpiceDouble}, Ref{SpiceInt}),
          method, target, et, fixref, abcorr, obsrvr, dref, dvec, spoint, trgepc, srfvec, found)

    handleerror()
    Bool(found[]) || return nothing

    spoint, trgepc[], srfvec
end

"""
    spd()

Returns the number of seconds in a day.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spd_c.html)
"""
function spd()
    ccall((:spd_c, libcspice), SpiceDouble, ())
end

"""
    sphcyl(radius, colat, slon)

Converts from spherical coordinates to cylindrical coordinates.

### Arguments ###

- `radius`: Distance of point from origin
- `colat`: Polar angle (co-latitude in radians) of point
- `slon`: Azimuthal angle (longitude) of point (radians)

### Output ###

- `r`: Distance of point from Z axis
- `lon`: Angle (radians) of point from XZ plane
- `z`: Height of point above XY plane

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sphcyl_c.html)
"""
function sphcyl(radius, colat, slon)
    r = Ref{SpiceDouble}()
    lon = Ref{SpiceDouble}()
    z = Ref{SpiceDouble}()
    ccall((:sphcyl_c, libcspice), Cvoid,
          (SpiceDouble, SpiceDouble, SpiceDouble,
           Ref{SpiceDouble}, Ref{SpiceDouble}, Ref{SpiceDouble}),
          radius, colat, slon, r, lon, z)
    r[], lon[], z[]
end

"""
    sphlat(r, colat, lons)

Convert from spherical coordinates to latitudinal coordinates.

### Arguments ###

- `r`: Distance of the point from the origin
- `colat`: Angle of the point from positive z axis (radians)
- `lons`: Angle of the point from the XZ plane (radians)

### Output ###

- `radius`: Distance of a point from the origin
- `lon`: Angle of the point from the XZ plane in radians
- `lat`: Angle of the point from the XY plane in radians

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sphlat_c.html)
"""
function sphlat(r, colat, lons)
    radius = Ref{SpiceDouble}()
    lon = Ref{SpiceDouble}()
    lat = Ref{SpiceDouble}()
    ccall((:sphcyl_c, libcspice), Cvoid,
          (SpiceDouble, SpiceDouble, SpiceDouble,
           Ref{SpiceDouble}, Ref{SpiceDouble}, Ref{SpiceDouble}),
          r, colat, lons, radius, lon, lat)
    radius[], lon[], lat[]
end

"""
    sphrec(r, colat, lon)

Convert from spherical coordinates to rectangular coordinates.

### Arguments ###

- `r`: Distance of a point from the origin
- `colat`: Angle of the point from the Z-axis in radians
- `lon`: Angle of the point from the XZ plane in radians

### Output ###

Returns the rectangular coordinates of the point.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sphrec_c.html)
"""
function sphrec(r, colat, lon)
    rectan = Array{SpiceDouble}(undef, 3)
    ccall((:sphrec_c, libcspice), Cvoid,
          (SpiceDouble, SpiceDouble, SpiceDouble, Ptr{SpiceDouble}),
          r, colat, lon, rectan)
    rectan
end

"""
    spk14a(handle, ncsets, coeffs, epochs)

Add data to a type 14 SPK segment associated with `handle`.
See also [spk14b](@ref) and [spk14e](@ref).

### Arguments ###

- `handle`: The handle of an SPK file open for writing
- `ncsets`: The number of coefficient sets and epochs
- `coeffs`: The collection of coefficient sets
- `epochs`: The epochs associated with the coefficient sets

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spk14a_c.html)
"""
function spk14a(handle, ncsets, coeffs, epochs)
    ccall((:spk14a_c, libcspice), Cvoid,
          (SpiceInt, SpiceInt, Ptr{SpiceDouble}, Ptr{SpiceDouble}),
          handle, ncsets, coeffs, epochs)
    handleerror()
end

"""
    spk14b(handle, segid, body, center, frame, first, last, chbdeg)

Begin a type 14 SPK segment in the SPK file associated with `handle`.
See also [spk14a](@ref) and [spk14e](@ref).

### Arguments ###

- `handle`: The handle of an SPK file open for writing
- `segid`: The string to use for segment identifier
- `body`: The NAIF ID code for the body of the segment
- `center`: The center of motion for body
- `frame`: The reference frame for this segment
- `first`: The first epoch for which the segment is valid
- `last`: The last epoch for which the segment is valid
- `chbdeg`: The degree of the Chebyshev Polynomial used

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spk14b_c.html)
"""
function spk14b(handle, segid, body, center, frame, first, last, chbdeg)
    ccall((:spk14b_c, libcspice), Cvoid,
          (SpiceInt, Cstring, SpiceInt, SpiceInt, Cstring, SpiceDouble, SpiceDouble, SpiceInt),
          handle, segid, body, center, frame, first, last, chbdeg)
    handleerror()
end

"""
    spk14e(handle)

End the type 14 SPK segment currently being written to the SPK file associated with `handle`.
See also [spk14a](@ref) and [spk14b](@ref).

### Arguments ###

- `handle`: The handle of an SPK file open for writing

### Output ###

Returns the handle of the SPK file.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spk14e_c.html)
"""
function spk14e(handle)
    ccall((:spk14e_c, libcspice), Cvoid, (SpiceInt,), handle)
    handle
end

"""
    spkacs(targ, et, ref, abcorr, obs, starg, lt, dlt)

Return the state (position and velocity) of a target body relative to an observer, optionally
corrected for light time and stellar aberration, expressed relative to an inertial reference frame.

### Arguments ###

- `targ`: Target body
- `et`: Observer epoch
- `ref`: Inertial reference frame of output state
- `abcorr`: Aberration correction flag
- `obs`: Observer

### Output ###

- `starg`: State of target
- `lt`: One way light time between observer and target
- `dlt`: Derivative of light time with respect to time

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkacs_c.html)
"""
function spkacs(targ, et, ref, abcorr, obs)
    starg = Array{SpiceDouble}(undef, 6)
    lt = Ref{SpiceDouble}()
    dlt = Ref{SpiceDouble}()
    ccall((:spkacs_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Cstring, Cstring, SpiceInt,
           Ptr{SpiceDouble}, Ref{SpiceDouble}, Ref{SpiceDouble}),
          targ, et, ref, abcorr, obs, starg, lt, dlt)
    handleerror()
    starg, lt[], dlt[]
end

"""
    spkapo(targ, et, ref, sobs, abcorr)

Return the position of a target body relative to an observer, optionally corrected for light time
and stellar aberration.

### Arguments ###

- `targ`: Target body
- `et`: Observer epoch
- `ref`: Inertial reference frame of observer's state
- `sobs`: State of observer wrt. solar system barycenter
- `abcorr`: Aberration correction flag

### Output ###

- `ptarg`: Position of target
- `lt`: One way light time between observer and target

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkapo_c.html)
"""
function spkapo(targ, et, ref, sobs, abcorr)
    length(sobs) != 6 && throw(ArgumentError("`sobs` must have six elements."))
    ptarg = Array{SpiceDouble}(undef, 3)
    lt = Ref{SpiceDouble}()
    ccall((:spkapo_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Cstring, Ptr{SpiceDouble}, Cstring,
           Ptr{SpiceDouble}, Ref{SpiceDouble}),
          targ, et, ref, sobs, abcorr, ptarg, lt)
    handleerror()
    ptarg, lt[]
end

"""
    spkaps(targ, et, ref, abcorr, stobs, accobs)

Given the state and acceleration of an observer relative to the solar system barycenter, return the
state (position and velocity) of a target body relative to the observer, optionally corrected for
light time and stellar aberration. All input and output vectors are expressed relative to an
inertial reference frame.

Users normally should call the high-level API routines [spkezr](@ref) or [spkez](@ref) rather than
this routine.

### Arguments ###

- `targ`: Target body.
- `et`: Observer epoch.
- `ref`: Inertial reference frame of output state.
- `abcorr`: Aberration correction flag.
- `stobs`: State of the observer relative to the SSB.
- `accobs`: Acceleration of the observer relative to the SSB.

### Output ###

- `starg`: State of target.
- `lt`: One way light time between observer and target.
- `dlt`: Derivative of light time with respect to time.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkaps_c.html)
"""
function spkaps(targ, et, ref, abcorr, stobs, accobs)
    length(stobs) != 6 && throw(ArgumentError("`stobs` must have six elements."))
    length(accobs) != 6 && throw(ArgumentError("`accobs` must have six elements."))
    starg = Array{SpiceDouble}(undef, 6)
    lt = Ref{SpiceDouble}()
    dlt = Ref{SpiceDouble}()
    ccall((:spkaps_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Cstring, Cstring, Ptr{SpiceDouble}, Ptr{SpiceDouble},
           Ptr{SpiceDouble}, Ref{SpiceDouble}, Ref{SpiceDouble}),
          targ, et, ref, abcorr, stobs, accobs, starg, lt, dlt)
    handleerror()
    starg, lt[], dlt[]
end

@deprecate spkapp spkaps

"""
    spkcls(handle)

Close an open SPK file.

### Arguments ###

- `handle`: Handle of the SPK file to be closed

### Output ###

Returns the handle of the closed file.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkcls_c.html)
"""
function spkcls(handle)
    ccall((:spkcls_c, libcspice), Cvoid, (SpiceInt,), handle)
    handleerror()
    handle
end

function spkcov!(cover, spk, idcode)
    ccall((:spkcov_c, libcspice), Cvoid,
          (Cstring, SpiceInt, Ref{Cell{SpiceDouble}}),
          spk, idcode, cover.cell)
    handleerror()
    cover
end

spkcov(spk, idcode) = spkcov!(SpiceDoubleCell(2000), spk, idcode)

"""
    spkcov!(cover, spk, idcode)
    spkcov(spk, idcode)

Find the coverage window for a specified ephemeris object in a specified SPK file.

### Arguments ###

- `cover`: Window giving coverage in `spk` for `idcode`
- `spk`: Name of the SPK file
- `idcode`: ID code of ephemeris object

### Output ###

Returns the extended coverage window.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkcov_c.html)
"""
spkcov
spkcov!

"""
    spkcpo(target, et, outref, refloc, abcorr, obspos, obsctr, obsref)

Return the state of a specified target relative to an "observer,"
where the observer has constant position in a specified reference
frame. The observer's position is provided by the calling program
rather than by loaded SPK files.

### Arguments ###

- `target`: Name of target ephemeris object
- `et`: Observation epoch
- `outref`: Reference frame of output state
- `refloc`: Output reference frame evaluation locus
- `abcorr`: Aberration correction
- `obspos`: Observer position relative to center of motion
- `obsctr`: Center of motion of observer
- `obsref`: Frame of observer position

### Output ###

- `state`: State of target with respect to observer
- `lt`: One way light time between target and observer

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkcpo_c.html)
"""
function spkcpo(target, et, outref, refloc, abcorr, obspos, obsctr, obsref)
    length(obspos) != 3 && throw(ArgumentError("`obspos` must have three elements."))
    state = Array{SpiceDouble}(undef, 6)
    lt = Ref{SpiceDouble}()
    ccall((:spkcpo_c, libcspice), Cvoid,
          (Cstring, SpiceDouble, Cstring, Cstring, Cstring, Ptr{SpiceDouble}, Cstring, Cstring,
           Ptr{SpiceDouble}, Ref{SpiceDouble}),
          target, et, outref, refloc, abcorr, obspos, obsctr, obsref, state, lt)
    handleerror()
    state, lt[]
end

"""

Return the state, relative to a specified observer, of a target having constant position in a
specified reference frame. The target's position is provided by the calling program rather than by
loaded SPK files.

### Arguments ###

- `trgpos`: Target position relative to center of motion
- `trgctr`: Center of motion of target
- `trgref`: Frame of target position
- `et`: Observation epoch
- `outref`: Reference frame of output state
- `refloc`: Output reference frame evaluation locus
- `abcorr`: Aberration correction
- `obsrvr`: Name of observing ephemeris object

### Output ###

- `state`: State of target with respect to observer
- `lt`: One way light time between target and observer

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkcpt_c.html)
"""
function spkcpt(trgpos, trgctr, trgref, et, outref, refloc, abcorr, obsrvr)
    length(trgpos) != 3 && throw(ArgumentError("`trgpos` must have three elements."))
    state = Array{SpiceDouble}(undef, 6)
    lt = Ref{SpiceDouble}()
    ccall((:spkcpt_c, libcspice), Cvoid,
          (Ptr{SpiceDouble}, Cstring, Cstring, SpiceDouble, Cstring, Cstring, Cstring, Cstring,
           Ptr{SpiceDouble}, Ref{SpiceDouble}),
          trgpos, trgctr, trgref, et, outref, refloc, abcorr, obsrvr, state, lt)
    handleerror()
    state, lt[]
end

"""
    spkcvo(target, et, outref, refloc, abcorr, obssta, obsepc, obsctr, obsref)

Return the state of a specified target relative to an "observer," where the observer has constant
velocity in a specified reference frame.  The observer's state is provided by the calling program
rather than by loaded SPK files.

### Arguments ###

- `target`: Name of target ephemeris object
- `et`: Observation epoch
- `outref`: Reference frame of output state
- `refloc`: Output reference frame evaluation locus
- `abcorr`: Aberration correction
- `obssta`: Observer state relative to center of motion
- `obsepc`: Epoch of observer state
- `obsctr`: Center of motion of observer
- `obsref`: Frame of observer state

### Output ###

- `state`: State of target with respect to observer
- `lt`: One way light time between target and observer

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkcvo_c.html)
"""
function spkcvo(target, et, outref, refloc, abcorr, obssta, obsepc, obsctr, obsref)
    length(obssta) != 6 && throw(ArgumentError("`obssta` must have three elements."))
    state = Array{SpiceDouble}(undef, 6)
    lt = Ref{SpiceDouble}()
    ccall((:spkcvo_c, libcspice), Cvoid,
          (Cstring, SpiceDouble, Cstring, Cstring, Cstring, Ptr{SpiceDouble}, SpiceDouble, Cstring,
           Cstring, Ptr{SpiceDouble}, Ref{SpiceDouble}),
          target, et, outref, refloc, abcorr, obssta, obsepc, obsctr, obsref, state, lt)
    handleerror()
    state, lt[]
end

"""
    spkcvt(trgsta, trgepc, trgctr, trgref, et, outref, refloc, abcorr, obsrvr)

Return the state, relative to a specified observer, of a target having constant velocity in a
specified reference frame. The target's state is provided by the calling program rather than by
loaded SPK files.

### Arguments ###

- `trgsta`: Target state relative to center of motion
- `trgepc`: Epoch of target state
- `trgctr`: Center of motion of target
- `trgref`: Frame of target state
- `et`: Observation epoch
- `outref`: Reference frame of output state
- `refloc`: Output reference frame evaluation locus
- `abcorr`: Aberration correction
- `obsrvr`: Name of observing ephemeris object

### Output ###

- `state`: State of target with respect to observer
- `lt`: One way light time between target and observer

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkcvt_c.html)
"""
function spkcvt(trgsta, trgepc, trgctr, trgref, et, outref, refloc, abcorr, obsrvr)
    length(trgsta) != 6 && throw(ArgumentError("`trgsta` must have three elements."))
    state = Array{SpiceDouble}(undef, 6)
    lt = Ref{SpiceDouble}()
    ccall((:spkcvt_c, libcspice), Cvoid,
          (Ptr{SpiceDouble}, SpiceDouble, Cstring, Cstring, SpiceDouble, Cstring, Cstring, Cstring,
           Cstring, Ptr{SpiceDouble}, Ref{SpiceDouble}),
          trgsta, trgepc, trgctr, trgref, et, outref, refloc, abcorr, obsrvr, state, lt)
    handleerror()
    state, lt[]
end

"""
    spkez(targ, et, ref, abcorr, obs)

Return the state (position and velocity) of a target body relative to an observing body,
optionally corrected for light time (planetary aberration) and stellar aberration.

### Arguments ###

- `targ`: Target body
- `et`: Observer epoch
- `ref`: Reference frame of output state vector
- `abcorr`: Aberration correction flag
- `obs`: Observing body

### Output ###

- `starg`: State of target
- `lt`: One way light time between observer and target

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkez_c.html)
"""
function spkez(targ, et, ref, abcorr, obs)
    starg = Array{SpiceDouble}(undef, 6)
    lt = Ref{SpiceDouble}()
    ccall((:spkez_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Cstring, Cstring, SpiceInt, Ptr{SpiceDouble}, Ref{SpiceDouble}),
          targ, et, ref, abcorr, obs, starg, lt)
    handleerror()
    starg, lt[]
end

"""
    spkezp(targ, et, ref, abcorr, obs)

Return the position of a target body relative to an observing body,
optionally corrected for light time (planetary aberration) and stellar aberration.

### Arguments ###

- `targ`: Target body
- `et`: Observer epoch
- `ref`: Reference frame of output state vector
- `abcorr`: Aberration correction flag
- `obs`: Observing body

### Output ###

- `ptarg`: Position of target
- `lt`: One way light time between observer and target

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkezp_c.html)
"""
function spkezp(targ, et, ref, abcorr, obs)
    ptarg = Array{SpiceDouble}(undef, 3)
    lt = Ref{SpiceDouble}()
    ccall((:spkezp_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Cstring, Cstring, SpiceInt, Ptr{SpiceDouble}, Ref{SpiceDouble}),
          targ, et, ref, abcorr, obs, ptarg, lt)
    handleerror()
    ptarg, lt[]
end

"""
    spkezr(targ, et, ref, abcorr, obs)

Return the state (position and velocity) of a target body relative to an observing body, optionally
corrected for light time (planetary aberration) and stellar aberration.

### Arguments ###

- `targ`: Target body name
- `et`: Observer epoch
- `ref`: Reference frame of output state vector
- `abcorr`: Aberration correction flag
- `obs`: Observing body name

### Output ###

- `starg`: State of target
- `lt`: One way light time between observer and target

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkezr_c.html)
"""
function spkezr(targ, et, ref, abcorr, obs)
    starg = Array{SpiceDouble}(undef, 6)
    lt = Ref{SpiceDouble}()
    ccall((:spkezr_c, libcspice), Cvoid,
          (Cstring, SpiceDouble, Cstring, Cstring, Cstring, Ptr{SpiceDouble}, Ref{SpiceDouble}),
          targ, et, ref, abcorr, obs, starg, lt)
    handleerror()
    starg, lt[]
end

"""
    spkgeo(targ, et, ref, obs)

Compute the geometric state (position and velocity) of a target body relative to an observing body.

### Arguments ###

- `targ`: Target body.
- `et`: Target epoch.
- `ref`: Target reference frame.
- `obs`: Observing body.

### Output ###

- `state`: State of target.
- `lt`: Light time.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkgeo_c.html)
"""
function spkgeo(targ, et, ref, obs)
    state = Array{SpiceDouble}(undef, 6)
    lt = Ref{SpiceDouble}()
    ccall((:spkgeo_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Cstring, SpiceInt, Ptr{SpiceDouble}, Ref{SpiceDouble}),
          targ, et, ref, obs, state, lt)
    handleerror()
    state, lt[]
end

"""
    spkgps(targ, et, ref, obs)

Compute the geometric position of a target body relative to an observing body.

### Arguments ###

- `targ`: Target body
- `et`: Target epoch
- `ref`: Target reference frame
- `obs`: Observing body

### Output ###

- `pos`: Position of target
- `lt`: Light time

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkgps_c.html)
"""
function spkgps(targ, et, ref, obs)
    pos = Array{SpiceDouble}(undef, 3)
    lt = Ref{SpiceDouble}()
    ccall((:spkgps_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Cstring, SpiceInt, Ptr{SpiceDouble}, Ref{SpiceDouble}),
          targ, et, ref, obs, pos, lt)
    handleerror()
    pos, lt[]
end

"""
    spklef(fname)

Load an ephemeris file for use by the readers. Return that file's handle, to be used by other
SPK routines to refer to the file.

### Arguments ###

- `fname`: Name of the file to be loaded

### Output ###

- `handle`: Loaded file's handle

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spklef_c.html)
"""
function spklef(fname)
    handle = Ref{SpiceInt}()
    ccall((:spklef_c, libcspice), Cvoid, (Cstring, Ref{SpiceInt}), fname, handle)
    handleerror()
    handle[]
end

"""
    spkltc(targ, et, ref, abcorr, stobs)

Return the state (position and velocity) of a target body relative to an observer, optionally
corrected for light time, expressed relative to an inertial reference frame.

### Arguments ###

- `targ`: Target body
- `et`: Observer epoch
- `ref`: Inertial reference frame of output state
- `abcorr`: Aberration correction flag
- `stobs`: State of the observer relative to the SSB

### Output ###

- `starg`: State of target
- `lt`: One way light time between observer and target
- `dlt`: Derivative of light time with respect to time

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkltc_c.html)
"""
function spkltc(targ, et, ref, abcorr, stobs)
    length(stobs) != 6 && throw(ArgumentError("`stobs` must have six elements."))
    starg = Array{SpiceDouble}(undef, 6)
    lt = Ref{SpiceDouble}()
    dlt = Ref{SpiceDouble}()
    ccall((:spkltc_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Cstring, Cstring, Ptr{SpiceDouble},
           Ptr{SpiceDouble}, Ref{SpiceDouble}, Ref{SpiceDouble}),
          targ, et, ref, abcorr, stobs, starg, lt, dlt)
    handleerror()
    starg, lt[], dlt[]
end

function spkobj!(ids, spk)
    ccall((:spkobj_c, libcspice), Cvoid,
          (Cstring, Ref{Cell{SpiceInt}}),
          spk, ids.cell)
    handleerror()
    ids
end

spkobj(spk) = spkobj!(SpiceIntCell(1000), spk)

"""
    spkobj!(ids, spk)
    spkobj(spk)

Find the set of ID codes of all objects in a specified SPK file.

### Arguments ###

- `ids`: A preallocated set of ID codes of objects in SPK file
- `spk`: Name of the SPK file

### Output ###

Returns the set of id codes.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkobj_c.html)
"""
spkobj!
spkobj

"""
    spkopa(file)

Open an existing SPK file for subsequent write.

### Arguments ###

- `file`: The name of an existing SPK file

### Output ###

Returns a handle attached to the SPK file opened to append.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkopa_c.html)
"""
function spkopa(file)
    handle = Ref{SpiceInt}()
    ccall((:spkopa_c, libcspice), Cvoid, (Cstring, Ref{SpiceInt}), file, handle)
    handleerror()
    handle[]
end

"""
    spkopn(name, ifname="", ncomch=0)

Create a new SPK file, returning the handle of the opened file.

### Arguments ###

- `name`: The name of the new SPK file to be created
- `ifname`: The internal filename for the SPK file (default: "")
- `ncomch`: The number of characters to reserve for comments (default: 0)

### Output ###

Returns the handle of the opened SPK file.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkopn_c.html)
"""
function spkopn(name, ifname="", ncomch=0)
    handle = Ref{SpiceInt}()
    ccall((:spkopn_c, libcspice), Cvoid,
          (Cstring, Cstring, Cint, Ref{Cint}),
          name, ifname, ncomch, handle)
    handleerror()
    handle[]
end

"""
    spksfs(body, et)

Search through loaded SPK files to find the highest-priority segment applicable to the body and
time specified.

### Arguments ###

- `body`: Body ID
- `et`: Ephemeris time

### Output ###

Returns `nothing` if no segment was found or a tuple consisting of:

- `handle`: Handle of file containing the applicable segment
- `descr`: Descriptor of the applicable segment
- `ident`: Identifier of the applicable segment

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spksfs_c.html)
"""
function spksfs(body, et)
    SIDLEN = 40
    idlen = SIDLEN + 1
    handle = Ref{SpiceInt}()
    descr = Array{SpiceDouble}(undef, 5)
    ident = Array{SpiceChar}(undef, idlen)
    found = Ref{SpiceBoolean}()
    ccall((:spksfs_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, SpiceInt,
           Ref{SpiceInt}, Ptr{SpiceDouble}, Ptr{SpiceChar}, Ref{SpiceBoolean}),
          body, et, idlen, handle, descr, ident, found)
    handleerror()
    Bool(found[]) || return nothing
    handle[], descr, unsafe_string(pointer(ident))
end

"""
    spkssb(targ, et, ref)

Return the state (position and velocity) of a target body relative to the solar system barycenter.

### Arguments ###

- `targ`: Target body
- `et`: Target epoch
- `ref`: Target reference frame

### Output ###

Returns the state of target.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkssb_c.html)
"""
function spkssb(targ, et, ref)
    starg = Array{SpiceDouble}(undef, 6)
    ccall((:spkssb_c, libcspice), Cvoid,
          (SpiceInt, SpiceDouble, Cstring, Ptr{SpiceDouble}),
          targ, et, ref, starg)
    handleerror()
    starg
end

"""
    spksub!(newh, handle, descr, ident, start, stop)

Extract a subset of the data in an SPK segment into a separate segment.

### Arguments ###

- `newh`: Handle of new segment
- `handle`: Handle of source segment
- `descr`: Descriptor of source segment
- `ident`: Identifier of source segment
- `start`: Beginning (initial epoch) of subset
- `stop`: End (final epoch) of subset

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spksub_c.html)
"""
function spksub!(newh, handle, descr, ident, start, stop)
    length(descr) != 5 && throw(ArgumentError("`descr` must have five elements."))
    ccall((:spksub_c, libcspice), Cvoid,
          (SpiceInt, Ptr{SpiceDouble}, Cstring, SpiceDouble, SpiceDouble, SpiceInt),
          handle, descr, ident, start, stop, newh)
    handleerror()
end

@deprecate spksub spksub!

"""
    spkuds(descr)

Unpack the contents of an SPK segment descriptor.

### Arguments ###

- `descr`: An SPK segment descriptor

### Output ###

- `body`: The NAIF ID code for the body of the segment
- `center`: The center of motion for body
- `frame`: The ID code for the frame of this segment
- `type`: The type of SPK segment
- `first`: The first epoch for which the segment is valid
- `last`: The last  epoch for which the segment is valid
- `start`: Beginning DAF address of the segment
- `stop`: Ending DAF address of the segment


### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkuds_c.html)
"""
function spkuds(descr)
    length(descr) != 5 && throw(ArgumentError("`descr` must have five elements."))
    body = Ref{SpiceInt}()
    center = Ref{SpiceInt}()
    frame = Ref{SpiceInt}()
    type = Ref{SpiceInt}()
    first = Ref{SpiceDouble}()
    last = Ref{SpiceDouble}()
    start = Ref{SpiceInt}()
    stop = Ref{SpiceInt}()
    ccall((:spkuds_c, libcspice), Cvoid,
          (Ptr{SpiceDouble}, Ref{SpiceInt}, Ref{SpiceInt}, Ref{SpiceInt}, Ref{SpiceInt},
           Ref{SpiceDouble}, Ref{SpiceDouble}, Ref{SpiceInt}, Ref{SpiceInt}),
          descr, body, center, frame, type, first, last, start, stop)
    handleerror()
    body[], center[], frame[], type[], first[], last[], start[], stop[]
end

"""
    spkuef(handle)

Unload an ephemeris file so that it will no longer be searched by the readers.

### Arguments ###

- `handle`: Handle of file to be unloaded

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkuef_c.html)
"""
function spkuef(handle)
    ccall((:spkuef_c, libcspice), Cvoid, (SpiceInt,), handle)
end

function str2et(string)
    et = Ref{SpiceDouble}(0)
    ccall((:str2et_c, libcspice), Cvoid, (Cstring, Ref{SpiceDouble}), string, et)
    handleerror()
    et[]
end

"""
Returns the state of a target body relative to an observing body.

- [NAIF documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/spkpos_c.html)
"""
function spkpos(targ::AbstractString, et::Float64, ref::AbstractString, obs::AbstractString; abcorr::AbstractString="NONE")
    starg = Array{SpiceDouble}(undef, 3)
    lt = Ref{SpiceDouble}(0)
    ccall((:spkpos_c, libcspice), Cvoid, (Cstring, SpiceDouble, Cstring, Cstring, Cstring, Ptr{SpiceDouble}, Ref{SpiceDouble}), targ, et, ref, abcorr, obs, starg, lt)
    handleerror()
    return starg, lt[]
end
spkpos(targ::Int, et::Float64, ref::AbstractString, obs::Int; abcorr::AbstractString="NONE") = spkpos(string(targ), et, ref, string(obs), abcorr=abcorr)
spkpos(targ::AbstractString, et::Float64, ref::AbstractString, obs::Int; abcorr::AbstractString="NONE") = spkpos(targ, et, ref, string(obs), abcorr=abcorr)
spkpos(targ::Int, et::Float64, ref::AbstractString, obs::AbstractString; abcorr::AbstractString="NONE") = spkpos(string(targ), et, ref, obs, abcorr=abcorr)

function spkw13(handle, body, center, frame, first, last, segid, degree, states, epochs)
    n = length(epochs)
    ccall(
        (:spkw13_c, libcspice), Cvoid,
        (Cint, Cint, Cint, Cstring, SpiceDouble, SpiceDouble, Cstring, Cint, Cint, Ptr{SpiceDouble}, Ptr{SpiceDouble}),
        handle[], body, center, frame, first, last, segid, degree, n, states, epochs
    )
    handleerror()
end





"""
    subslr(method, target, et, fixref, obsrvr, abcorr)

Compute the rectangular coordinates of the sub-solar point on
a target body at a specified epoch, optionally corrected for
light time and stellar aberration.

### Arguments ###

- `method`: Computation method.
- `target`: Name of target body.
- `et`: Epoch in ephemeris seconds past J2000 TDB.
- `fixref`: Body-fixed, body-centered target body frame.
- `obsrvr`: Name of observing body.
- `abcorr`: Aberration correction.

### Output ###

- `spoint`: Sub-solar point on the target body.
- `trgepc`: Sub-solar point epoch.
- `srfvec`: Vector from observer to sub-solar point.

Returns `cell` with its cardinality set to `card`.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/subslr_c.html)
"""
function subslr(method, target, et, fixref, obsrvr; abcorr="NONE")
    spoint = Array{SpiceDouble}(undef, 3)
    trgepc = Ref{SpiceDouble}()
    srfvec = Array{SpiceDouble}(undef, 3)
    ccall((:subslr_c, libcspice), Cvoid,
          (Cstring, Cstring, SpiceDouble, Cstring, Cstring, Cstring,
           Ptr{SpiceDouble}, Ref{SpiceDouble}, Ptr{SpiceDouble}),
          method, target, et, fixref, abcorr, obsrvr, spoint, trgepc, srfvec)
    handleerror()
    spoint, trgepc[], srfvec
end

"""
    subpnt(method, target, et, fixref, obsrvr, abcorr)

Compute the rectangular coordinates of the sub-observer point on
a target body at a specified epoch, optionally corrected for
light time and stellar aberration.

### Arguments ###

- `method`: Computation method.
- `target`: Name of target body.
- `et`: Epoch in ephemeris seconds past J2000 TDB.
- `fixref`: Body-fixed, body-centered target body frame.
- `obsrvr`: Name of observing body.
- `abcorr`: Aberration correction.

### Output ###

- `spoint`: Sub-solar point on the target body.
- `trgepc`: Sub-solar point epoch.
- `srfvec`: Vector from observer to sub-solar point.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/subpnt_c.html)
"""
function subpnt(method, target, et, fixref, obsrvr; abcorr="NONE")
    spoint = Array{SpiceDouble}(undef, 3)
    trgepc = Ref{SpiceDouble}()
    srfvec = Array{SpiceDouble}(undef, 3)
    ccall((:subpnt_c, libcspice), Cvoid,
          (Cstring, Cstring, SpiceDouble, Cstring, Cstring, Cstring,
           Ptr{SpiceDouble}, Ref{SpiceDouble}, Ptr{SpiceDouble}),
          method, target, et, fixref, abcorr, obsrvr, spoint, trgepc, srfvec)
    handleerror()
    spoint, trgepc[], srfvec
end

"""
    surfpt(positn, u, a, b, c)

Determine the intersection of a line-of-sight vector with the surface of an ellipsoid.

### Arguments ###

- `positn`: Position of the observer in body-fixed frame
- `u`: Vector from the observer in some direction
- `a`: Length of the ellipsoid semi-axis along the x-axis
- `b`: Length of the ellipsoid semi-axis along the y-axis
- `c`: Length of the ellipsoid semi-axis along the z-axis

### Output ###

Returns the point on the ellipsoid pointed to by u or `nothing` if none was found.

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/surfpt_c.html)
"""
function surfpt(positn, u, a, b, c)
    length(positn) != 3 && throw(ArgumentError("Length of `positn` must be 3."))
    length(u) != 3 && throw(ArgumentError("Length of `u` must be 3."))
    point = Array{SpiceDouble}(undef, 3)
    found = Ref{SpiceBoolean}()
    ccall((:surfpt_c, libcspice), Cvoid,
          (Ptr{SpiceDouble}, Ptr{SpiceDouble}, SpiceDouble, SpiceDouble, SpiceDouble,
           Ptr{SpiceDouble}, Ref{SpiceBoolean}),
          positn, u, a, b, c, point, found)
    handleerror()
    !Bool(found[]) && return nothing

    point
end

"""
    swpool(agent, names)

Add a name to the list of agents to notify whenever a member of a list of kernel variables is updated.

### Arguments ###

- `agent`: The name of an agent to be notified after updates
- `names`: Variable names whose update causes the notice

### References ###

- [NAIF Documentation](https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/swpool_c.html)
"""
function swpool(agent, names)
    names, m, n = chararray(names)
    ccall((:swpool_c, libcspice), Cvoid, (Cstring, SpiceInt, SpiceInt, Ptr{SpiceChar}),
          agent, m, n, names)
    handleerror()
    nothing
end

"""
Return the state transformation matrix from one frame to another at a specified epoch.

https://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/cspice/sxform_c.html
"""
function sxform(from::String, to::String, et::Float64)
    rot = Array{SpiceDouble}(undef, 6, 6)
    ccall((:sxform_c, libcspice), Cvoid, (Cstring, Cstring, SpiceDouble, Ptr{SpiceDouble}), from, to, et, rot)
    handleerror()
    return rot
end
