using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcspice"], :libcspice),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaAstro/SPICEBuilder/releases/download/N0066"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/cspice.v66.0.0.aarch64-linux-gnu.tar.gz", "437c4fc29b01220dd35595bb5df312a57909975deefb007207a55f2bedce416a"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/cspice.v66.0.0.aarch64-linux-musl.tar.gz", "cb9df212753b417c177d2b030b26b978415ea4088d4a763781df23d145ad8fe3"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/cspice.v66.0.0.arm-linux-gnueabihf.tar.gz", "f5921972058ec0c49b344980881c03db34cacf9d47d44ae24609db95bb739d05"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/cspice.v66.0.0.arm-linux-musleabihf.tar.gz", "2123aef8b965372b70ff629d3e34318ade82fc7c6209d9f9c78572b528057a1c"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/cspice.v66.0.0.i686-linux-gnu.tar.gz", "b9b5d98aada742aafba8407314abab12507a08ccea25ba704a7aaffa016d0031"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/cspice.v66.0.0.i686-linux-musl.tar.gz", "257327d017ea3e68f3351b9b6a31ede0f6880e7caf880c80f3616b3c8c6749f7"),
    Windows(:i686) => ("$bin_prefix/cspice.v66.0.0.i686-w64-mingw32.tar.gz", "a0f0d4045d6e6b6899e8259760429716c1a3c2889c980d824d40e22da454efca"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/cspice.v66.0.0.powerpc64le-linux-gnu.tar.gz", "de8589fe16e44a42b6394da7c1a6b9737c825b37ff3d6cf05ef0bb9bf3494736"),
    MacOS(:x86_64) => ("$bin_prefix/cspice.v66.0.0.x86_64-apple-darwin14.tar.gz", "4d003aa29c2e2dae574f7aa58854afa423eaaf0d87693cb79daa485e063116d6"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/cspice.v66.0.0.x86_64-linux-gnu.tar.gz", "d5a06aa62f50345063e767b22470a5f44af3ee28d9f2985f528322e188b8839e"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/cspice.v66.0.0.x86_64-linux-musl.tar.gz", "6e618e7a4e89481d786ea333762afb0c6e88dec2244a37016c0ba2feff0faca2"),
    FreeBSD(:x86_64) => ("$bin_prefix/cspice.v66.0.0.x86_64-unknown-freebsd11.1.tar.gz", "a22831018f7fffbfd08fce0ed935009c53bb31fb50276d6eb87fcaf2d105eda5"),
    Windows(:x86_64) => ("$bin_prefix/cspice.v66.0.0.x86_64-w64-mingw32.tar.gz", "758d5b08bc9e35c7ad15c062c5275899ed2b6e4ab7b6eb2eaa188b3ccc51a129"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
